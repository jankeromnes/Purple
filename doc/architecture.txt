
Visible parts are loaded into iframes; invisible parts are loaded into the root iframe.

The global object "window.purple" has 'parts'. The global object is renamed by convention:
  var thePurple = window.purple;
This global is cross-window: it is picked up be iframes via window.parent.purple. 
All inter-frame communications should go thru thePurple.

Parts are named objects; assemblies are collections of parts that share one or more functions.
These functions can be called for all parts in an assembly (dispatch to list).

iframes connect to the global UI by registering parts:
     thePurple.registerPart(localObject);
This part and all other existing parts are notified of the successful registration when 
their "partAdded" method is called:
     localObject.partAdded(partInfo) {  // registerPart was called.
Parts use this callback to connect to parts in other iframes.

Features are named interfaces on parts. If a newly added part has a feature, say
'editor', then we know that this part supports the API and sends the events given in the
editor feature object. To recieve events from a part we register with it:
     this.editor.registerPart(this);
Then we implement any of the event functions we need on our object.
  
Parts are created by inheriting the base PurplePart:  
  var editorFeatureByOrion = new thePurple.PurplePart('editorByOrion');  
Parts allow other parts to listen to their events by adding a part container:
  Assembly.addPartContainer(editorFeatureByOrion);

iframe top level code should:
  use require() to load leaf dependencies,
  call .initialize(thePurple) on any objects needing access to the super-global,
  call .registerPart() on any objects that need to be parts of other objects,
  call .connect() connect objects.
   